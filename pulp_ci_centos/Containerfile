FROM quay.io/centos/centos:stream9
# https://ryandaniels.ca/blog/docker-dockerfile-arg-from-arg-trouble/
ARG SCHEME="http"

COPY s6-overlay-x86_64.tar.gz /tmp
COPY s6-overlay-noarch.tar.gz /tmp
COPY s6-overlay-symlinks-noarch.tar.gz /tmp
COPY s6-overlay-symlinks-arch.tar.gz /tmp

RUN tar xzf /tmp/s6-overlay-x86_64.tar.gz -C / && rm /tmp/s6-overlay-x86_64.tar.gz
RUN tar xvf /tmp/s6-overlay-noarch.tar.gz -C / && rm /tmp/s6-overlay-noarch.tar.gz
RUN tar xvf /tmp/s6-overlay-symlinks-noarch.tar.gz -C / && rm /tmp/s6-overlay-symlinks-noarch.tar.gz
RUN tar xvf /tmp/s6-overlay-symlinks-arch.tar.gz -C / && rm /tmp/s6-overlay-symlinks-arch.tar.gz

# https://superuser.com/questions/959380/how-do-i-install-generate-all-locales-on-fedora
# This may not be necessary anymore because Fedora 30, unlike CentOS 7, has
# glibc subpackages like glibc-langpack-en.
RUN rm /etc/rpm/macros.image-language-conf
RUN echo 'LANG="en_US.UTF-8"' > /etc/locale.conf
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV PYTHONUNBUFFERED=0
ENV DJANGO_SETTINGS_MODULE=pulpcore.app.settings
ENV PULP_SETTINGS=/etc/pulp/settings.py
ENV _BUILDAH_STARTED_IN_USERNS=""
ENV BUILDAH_ISOLATION=chroot

ENV S6_BEHAVIOUR_IF_STAGE2_FAILS=1
# Needed because otherwise all services must start within 5 seconds
# https://github.com/just-containers/s6-overlay/issues/467
ENV S6_CMD_WAIT_FOR_SERVICES_MAXTIME=0

# glibc-langpack-en is needed to provide the en_US.UTF-8 locale, which Pulp
# seems to need.
#
# The -devel and ninja-build lines are needed until python3-createrepo_c gets an
# RPM upgrade to 0.20.1. Until then, we install & build it from PyPI.
RUN dnf -y install dnf-plugins-core && \
    dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \
    dnf config-manager --set-enabled crb && \
    dnf -y update && \
    dnf -y install python3 python3-devel && \
    dnf -y install openssl && \
    dnf -y install openldap-devel && \
    dnf -y install wget git && \
    dnf -y install python3-psycopg2 && \
    dnf -y install glibc-langpack-en && \
    dnf -y install python3-libmodulemd && \
    dnf -y install python3-libcomps && \
    dnf -y install postgresql && \
    dnf -y install postgresql-contrib && \
    dnf -y install postgresql-server && \
    dnf -y install postgresql-upgrade && \
    dnf -y install libpq-devel && \
    dnf -y install nginx && \
    dnf -y install redis && \
    dnf -y install python3-setuptools && \
    dnf -y install python3-cryptography && \
    dnf -y install buildah --exclude container-selinux && \
    dnf -y install libmodulemd-devel && \
    dnf -y install libcomps-devel && \
    dnf -y install https://kojihub.stream.centos.org/kojifiles/packages/zchunk/1.1.9/4.el9/x86_64/zchunk-devel-1.1.9-4.el9.x86_64.rpm && \
    dnf -y install ninja-build && \
    dnf -y install 'dnf-command(builddep)' && \
    dnf -y install cairo-devel cmake gobject-introspection-devel cairo-gobject-devel && \
    dnf -y install libcurl-devel libxml2-devel sqlite-devel file-devel && \
    dnf -y install ostree-libs ostree && \
    dnf -y install skopeo && \
    dnf -y install podman && \
    dnf -y install sudo && \
    dnf -y install zstd && \
    dnf clean all

RUN sed 's|^#mount_program|mount_program|g' -i /etc/containers/storage.conf

RUN mkdir -p /database \
             /etc/nginx/pulp \
             /etc/pulp \
             /etc/ssl/pulp \
             /nginx \
             /var/lib/pgsql \
             /var/lib/pulp/assets \
             /var/lib/pulp/media \
             /var/lib/pulp/tmp \
             /var/run/pulpcore-resource-manager \
             /var/run/pulpcore-worker-1 \
             /var/run/pulpcore-worker-2

RUN pip3 install --upgrade pip packaging setproctitle && \
    rm -rf /root/.cache/pip

COPY assets/openssl.cnf /etc/ssl/pulp/openssl.cnf
COPY assets/v3.cnf /etc/ssl/pulp/v3.cnf
COPY assets/wait_on_database_migrations.sh /database/assets/wait_on_database_migrations.sh
COPY assets/ssl_nginx.conf /nginx/ssl_nginx.conf
COPY assets/nginx.conf /nginx/nginx.conf
COPY assets/webserver.sh /nginx/webserver.sh
COPY assets/s6-rc.d /etc/s6-overlay/s6-rc.d
COPY assets/init /etc/init
COPY assets/fix-attrs.d /etc/fix-attrs.d

RUN /nginx/webserver.sh

ENTRYPOINT ["/init"]

EXPOSE 80
